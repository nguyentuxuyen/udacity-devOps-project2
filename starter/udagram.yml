Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  ProjectName:
    Type: String
    Description: Project name
  AmiID:
    Type: String
    Description: AMI ID
  InstanceType:
    Type: String
    Description: Instance Type
  S3Name:
    Type: String
    Description: Bucket Name

Resources:
  # Add your resources here
  ## Create Load Balancer SecurityGroup
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Http access to load balancer
      VpcId:
        Fn::ImportValue:
          !Sub ${ProjectName}-vpcid
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-loadbalancer-security-group

  ## Create Web Server SecurityGroup
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Http access to hosts from the LB Security Group
      VpcId:
        Fn::ImportValue:
          !Sub ${ProjectName}-vpcid
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-webserver-security-group

  ## Create Web Server Instance Role
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-S3ReadOnly
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              Resource: !Sub 'arn:aws:s3:::${S3Name}/*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - Ref: InstanceRole

  # We include a portion of the LaunchTemplate resource so you can use the UserData.
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${ProjectName}-template
      LaunchTemplateData:
        ImageId: !Ref AmiID
        InstanceType: !Ref InstanceType
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install awscli nginx -y
            service nginx start

            cd /var/www/html/
            sudo mkdir udagram
            cd udagram
            sudo aws s3 cp s3://${S3Name}/index.html .
          - {
              S3Name: !Ref S3Name
            }
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        BlockDeviceMappings:
        - DeviceName: '/dev/sdk'
          Ebs:
            VolumeSize: 10
        IamInstanceProfile:
          Name: !Ref InstanceProfile

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${ProjectName}-privateSubnet1
      - Fn::ImportValue: !Sub ${ProjectName}-privateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: 2
      DesiredCapacity: 2
      MaxSize: 6
      TargetGroupARNs:
      - !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-vpcid

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${ProjectName}-publicSubnet1
      - Fn::ImportValue: !Sub ${ProjectName}-publicSubnet2
      SecurityGroups:
      - !Ref LBSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  WebAppLoadBalancerURL:
    Description: "Load balancer URL"
    Value: !Sub 
      - "http://${load_balancer_dns_name}"
      - load_balancer_dns_name: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${ProjectName}-loadbalancer-dns